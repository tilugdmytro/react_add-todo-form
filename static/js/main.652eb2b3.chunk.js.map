{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/user.ts","components/TodoForm.tsx/TodoForm.tsx","services/todo.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","onSubmit","useState","setTitle","titleErrorMessage","setTitleErrorMessage","setUserId","hasUserIdError","setHasUserIdError","isValidTitle","test","action","method","event","preventDefault","htmlFor","type","value","placeholder","onChange","target","required","disabled","getNewTodoId","Math","max","initialTodos","App","setTodos","newTodo","currTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.652eb2b3.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={cn('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\nimport { User } from '../types/User';\n\nexport function getUserById(userId: number): User | null {\n  return usersFromServer.find((user) => user.id === userId) || null;\n}\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport usersFromServer from '../../api/users';\nimport { Todo } from '../../types/Todo';\nimport { getUserById } from '../../services/user';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [titleErrorMessage, setTitleErrorMessage] = useState('');\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const isValidTitle = /^[a-zA-Zа-яА-Я0-9\\s]+$/.test(title);\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasUserIdError(!userId);\n\n    if (!title) {\n      setTitleErrorMessage('Please enter a title');\n    } else if (!isValidTitle) {\n      setTitleErrorMessage(\n        'Please enter valid title. Special characters are not allowed',\n      );\n    }\n\n    if (!isValidTitle || !userId) {\n      return;\n    }\n\n    onSubmit({\n      user: getUserById(userId),\n      id: 0,\n      title,\n      completed: false,\n      userId,\n    });\n\n    reset();\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleErrorMessage('');\n  };\n\n  const handUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      className=\"box\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"todo-title\" className=\"label\">\n          Title:\n        </label>\n        <input\n          id=\"todo-title\"\n          className={cn('input', {\n            'is-danger': titleErrorMessage,\n          })}\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={title}\n          placeholder=\"Enter a title\"\n          onChange={handleTitleChange}\n        />\n\n        {titleErrorMessage && (\n          <span className=\"help is-size-6 is-danger\">{titleErrorMessage}</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"todo-user-id\" className=\"label\">\n          User:\n        </label>\n        <div className=\"control\">\n          <div\n            className={cn('select', {\n              'is-danger': hasUserIdError,\n            })}\n          >\n            <select\n              id=\"todo-user-id\"\n              data-cy=\"userSelect\"\n              required\n              value={userId}\n              onChange={handUserIdChange}\n            >\n              <option value=\"0\" disabled>\n                Choose a user\n              </option>\n              {usersFromServer.map((user) => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {hasUserIdError && (\n          <span className=\"help is-size-6 is-danger\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\" className=\"button is-light\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n}\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { TodoForm } from './components/TodoForm.tsx/TodoForm';\nimport { getUserById } from './services/user';\nimport { getNewTodoId } from './services/todo';\n\nexport const initialTodos: Todo[] = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos((currTodos) => [...currTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"container is-fluid\">\n      <h1 className=\"title is-3\">Add todo form</h1>\n\n      <TodoForm onSubmit={addTodo} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}